
import logging as lg

lg.basicConfig(filename = "Logger.log",level = lg.DEBUG,filemode = 'w', format = "%(asctime)s %(levelname)s %(message)s")

class ListSearch:
    def __init__(self,data):
        self.data = data
    def search(self,value):
        try:
            lg.info("Searching..")
            for i in range(len(self.data)):
                if(self.data[i] == value):
                    lg.info("Succesful search")
                    return i , True
            lg.info("Unsuccesful Search")
            return False
        except Exception as e:
            lg.error("Error Occurred")
            lg.exception(e)




import logging
logging.basicConfig(filename='sol_2.log',level= logging.DEBUG,filemode='w', format="%(lineno)d-%(asctime)s-%(levelname)s-%(message)s")
class Add_into_dict():
    def __init__(self, diction):
        self.diction = diction

    def element_to_add(self, element):
        logging.info("into the element_to_add method")
        if type(element) == dict:
            try:
                logging.info("insinde the try>>>>>>>...")
                self.diction.update(element)
                logging.info("New element is added")
                logging.info(f"{self.diction}")
            except Exception as e:
                logging.error("there is some issue with the code")
                logging.error(e)
                
        else:
            logging.error(f"please check {element} is valid dict or not ")
            
            
            
            


class Tuple:
    def __init__(self,t1):
        self.t1=t1
    def extract(self):
            start=int(input('Enter the start index number'))
            end=int(input('Enter the start index number'))
            return self.t1[start:end]






import mysql.connector
class my_sql:

    def __init__(self, host, user,passward):
        self.host= host
        self.user = user
        self.passward= passward
    
    def get_conn(self):
            self.mydb = mysql.connector.connect(host=self.host, user=self.user, password=self.passward)
            return self.mydb
        
    def get_cursor(self):
        self.cursor = self.mydb.cursor()
        return self.cursor
    
    def database(self,db_name):
        try:
            self.db_name = db_name
            return self.cursor.execute(f"create database if not exists {self.db_name}")
        except Exception as e:
            print(e)

    def table(self,sqldata):
        try:
            self.sqldata = sqldata
            self.cursor.execute(f'use {self.db_name}') 
            self.cursor.execute(f"create table if not exists  {self.sqldata}")
        except Exception as e:
            print(e)
    
    def insert(self,data):
        try:    
            self.data=data
            self.cursor.execute(f'use ineuron')
            self.cursor.execute(self.data)
            self.mydb.commit()
        except Exception as e:
            print(e)

    def details(self, detail):
        self.detail= detail
        self.cursor.execute(self.detail)
        print(self.cursor.fetchall())

    def update(self,new_update):
        try:  
            self.new_update = new_update
            self.cursor.execute(self.new_update)
            self.mydb.commit()
        except Exception as e:
            print(e)

    def delete(self, dell):
        try:
            self.dell = dell
            self.cursor.execute(self.dell)
            self.mydb.commit()

        except Exception as e:
            print(e)

db1= my_sql("localhost", "abc", "password")
db1.get_conn()
db1.get_cursor()
db1.database("ineuron")
db1.table("tab2(rollno INT(10) ,name VARCHAR(30) ,address VARCHAR(30) ,age INT(10) )")
#db1.insert("insert into tab2 values(12345,'Mudit','Dehradun',30)")
db1.details("select * from ineuron.tab2")
db1.update("UPDATE ineuron.tab2 SET age = 50 where age = 30")
# db1.details("select * from mud.tab1")
db1.delete("delete from ineuron.tab2 where age= 50")
